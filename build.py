import re
import sys

dependencies_source_file = "dependencies.txt" if len(sys.argv) < 2 else sys.argv[1]
dependencies_target_file = "dependencies" if len(sys.argv) < 3 else sys.argv[2]


def raw_line_iterator(file_path):
    key = None
    with open(dependencies_source_file, "r") as source:
        for line in source:
            line = line.strip()
            if line.startswith("[") and line.endswith("]"):
                key = line[1:-1]
            elif key is not None and line and not line.startswith("#"):
                yield key, line
            elif not key:
                yield "raw", line
            else:
                pass


# pattern: command?install_command
dependencies = {}
functions = ""
pattern = re.compile(r"(?P<command>[^?]+)\s+\?\?\s+(?P<install_command>.+)")
for key, item in raw_line_iterator(dependencies_source_file):
    if key == "raw":
        functions += item + "\n"
        continue
    dependencies[key] = [] if key not in dependencies else dependencies[key]
    command, install_command = pattern.match(item).groups()
    commands = command.split("||")
    install_commands = install_command.split("||")
    dependencies[key].append(
        {
            "command": [_.strip() for _ in commands],
            "install_command": [
                _.strip().replace("@@", "$binstaller") for _ in install_commands
            ],
        }
    )

# generate script
with open(dependencies_target_file, "w") as target:
    target.write("#!/bin/bash\n")
    target.write("# !!! DO NOT EDIT THIS FILE !!!\n\n")
    target.write(f"{functions}")
    target.write("nsudo=$0\n")
    target.write("binstaller=$1\n")
    target.write("dependencies_failed_count=0\n")
    for key, items in dependencies.items():
        target.write(f"function dependencies_{key}_install() {{\n")
        for item in items:
            commands = " ".join(item["command"])
            target.write(
                f"  dependencies_failed_count=$((dependencies_failed_count+1))\n"
            )
            target.write(f"  while :; do\n")
            for install_command in item["install_command"]:
                target.write(f"    check_command {commands} &\n")
                target.write(
                    f"    check $! 'check {commands}' '{commands} not found'\n"
                )
                # 0 is ok
                target.write(f"    if [ $? -ne 0 ]; then\n")
                target.write(f"      installer_name={install_command.split()[0]}\n")
                target.write(f"      installer_options=''\n")
                target.write(f"      if [[ $installer_name == 'apt' ]]; then\n")
                target.write(f"        installer_options='-y'\n")
                target.write(f"      fi\n")
                target.write(
                    f"      {install_command} $installer_options &> /dev/null &\n"
                )
                target.write(f"      if [ $? -ne 0 ]; then\n")
                target.write(
                    f"        $nsudo {install_command} $installer_options &> /dev/null &\n"
                )
                target.write(f"      fi\n")
                target.write(
                    f'      check $! "{install_command}" "{install_command} failed"\n'
                )
                target.write(f"      if [ $? -eq 0 ]; then\n")
                target.write(
                    f"        dependencies_failed_count=$((dependencies_failed_count-1))\n"
                )
                target.write(f"        break\n")
                target.write(f"      fi\n")
                target.write(f"    else\n")
                target.write(
                    f"      dependencies_failed_count=$((dependencies_failed_count-1))\n"
                )
                target.write(f"      break\n")
                target.write(f"    fi\n")
            target.write(f"    break\n")
            target.write(f"  done\n")
        target.write("}\n\n")
