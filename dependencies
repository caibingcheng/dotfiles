#!/bin/bash
# !!! DO NOT EDIT THIS FILE !!!

# comand ?? install command || install command
# @@ means default installer, such as apt, yum, etc.

function special_install_brew() {
export HOMEBREW_INSTALL_FROM_API=1
export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
eval "$(brew --prefix)/bin/brew shellenv"
brew update
}

nsudo=$1
binstaller=$2
dependencies_failed_count=0
function dependencies_required_install() {
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command curl &
    check $! 'check curl' 'curl not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install curl $installer_options || (test $? -ne 0 && $nsudo $binstaller install curl $installer_options) &
      check $! "$binstaller install curl" "$binstaller install curl failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command git &
    check $! 'check git' 'git not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install git $installer_options || (test $? -ne 0 && $nsudo $binstaller install git $installer_options) &
      check $! "$binstaller install git" "$binstaller install git failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command cargo &
    check $! 'check cargo' 'cargo not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install cargo $installer_options || (test $? -ne 0 && $nsudo $binstaller install cargo $installer_options) &
      check $! "$binstaller install cargo" "$binstaller install cargo failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command brew &
    check $! 'check brew' 'brew not found'
    if [[ $? -ne 0 ]]; then
      installer_name=special_install_brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      special_install_brew $installer_options || (test $? -ne 0 && $nsudo special_install_brew $installer_options) &
      check $! "special_install_brew" "special_install_brew failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
}

function dependencies_basic_install() {
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command preload &
    check $! 'check preload' 'preload not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install preload $installer_options || (test $? -ne 0 && $nsudo $binstaller install preload $installer_options) &
      check $! "$binstaller install preload" "$binstaller install preload failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command vim &
    check $! 'check vim' 'vim not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install vim $installer_options || (test $? -ne 0 && $nsudo $binstaller install vim $installer_options) &
      check $! "$binstaller install vim" "$binstaller install vim failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command autossh &
    check $! 'check autossh' 'autossh not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install autossh $installer_options || (test $? -ne 0 && $nsudo $binstaller install autossh $installer_options) &
      check $! "$binstaller install autossh" "$binstaller install autossh failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command exa &
    check $! 'check exa' 'exa not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install exa $installer_options || (test $? -ne 0 && $nsudo $binstaller install exa $installer_options) &
      check $! "$binstaller install exa" "$binstaller install exa failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command exa &
    check $! 'check exa' 'exa not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install exa $installer_options || (test $? -ne 0 && $nsudo brew install exa $installer_options) &
      check $! "brew install exa" "brew install exa failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command exa &
    check $! 'check exa' 'exa not found'
    if [[ $? -ne 0 ]]; then
      installer_name=cargo
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      cargo install exa --locked $installer_options || (test $? -ne 0 && $nsudo cargo install exa --locked $installer_options) &
      check $! "cargo install exa --locked" "cargo install exa --locked failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command bat batcat &
    check $! 'check bat batcat' 'bat batcat not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install bat $installer_options || (test $? -ne 0 && $nsudo $binstaller install bat $installer_options) &
      check $! "$binstaller install bat" "$binstaller install bat failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command bat batcat &
    check $! 'check bat batcat' 'bat batcat not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install bat $installer_options || (test $? -ne 0 && $nsudo brew install bat $installer_options) &
      check $! "brew install bat" "brew install bat failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command bat batcat &
    check $! 'check bat batcat' 'bat batcat not found'
    if [[ $? -ne 0 ]]; then
      installer_name=cargo
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      cargo install bat --locked $installer_options || (test $? -ne 0 && $nsudo cargo install bat --locked $installer_options) &
      check $! "cargo install bat --locked" "cargo install bat --locked failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command fd fdfind &
    check $! 'check fd fdfind' 'fd fdfind not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install fd $installer_options || (test $? -ne 0 && $nsudo $binstaller install fd $installer_options) &
      check $! "$binstaller install fd" "$binstaller install fd failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command fd fdfind &
    check $! 'check fd fdfind' 'fd fdfind not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install fd-find $installer_options || (test $? -ne 0 && $nsudo $binstaller install fd-find $installer_options) &
      check $! "$binstaller install fd-find" "$binstaller install fd-find failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command fd fdfind &
    check $! 'check fd fdfind' 'fd fdfind not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install fd $installer_options || (test $? -ne 0 && $nsudo brew install fd $installer_options) &
      check $! "brew install fd" "brew install fd failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command fd fdfind &
    check $! 'check fd fdfind' 'fd fdfind not found'
    if [[ $? -ne 0 ]]; then
      installer_name=cargo
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      cargo install fd-find --locked $installer_options || (test $? -ne 0 && $nsudo cargo install fd-find --locked $installer_options) &
      check $! "cargo install fd-find --locked" "cargo install fd-find --locked failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command rg &
    check $! 'check rg' 'rg not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install ripgrep $installer_options || (test $? -ne 0 && $nsudo $binstaller install ripgrep $installer_options) &
      check $! "$binstaller install ripgrep" "$binstaller install ripgrep failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    check_command rg &
    check $! 'check rg' 'rg not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install ripgrep $installer_options || (test $? -ne 0 && $nsudo brew install ripgrep $installer_options) &
      check $! "brew install ripgrep" "brew install ripgrep failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command zoxide &
    check $! 'check zoxide' 'zoxide not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install zoxide $installer_options || (test $? -ne 0 && $nsudo brew install zoxide $installer_options) &
      check $! "brew install zoxide" "brew install zoxide failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command thefuck &
    check $! 'check thefuck' 'thefuck not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install thefuck $installer_options || (test $? -ne 0 && $nsudo brew install thefuck $installer_options) &
      check $! "brew install thefuck" "brew install thefuck failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command tldr &
    check $! 'check tldr' 'tldr not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install tlrc $installer_options || (test $? -ne 0 && $nsudo brew install tlrc $installer_options) &
      check $! "brew install tlrc" "brew install tlrc failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command ranger &
    check $! 'check ranger' 'ranger not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install ranger $installer_options || (test $? -ne 0 && $nsudo brew install ranger $installer_options) &
      check $! "brew install ranger" "brew install ranger failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command gitui &
    check $! 'check gitui' 'gitui not found'
    if [[ $? -ne 0 ]]; then
      installer_name=brew
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      brew install gitui $installer_options || (test $? -ne 0 && $nsudo brew install gitui $installer_options) &
      check $! "brew install gitui" "brew install gitui failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
}

function dependencies_optional_install() {
  dependencies_failed_count=$((dependencies_failed_count+1))
  while :; do
    check_command meld &
    check $! 'check meld' 'meld not found'
    if [[ $? -ne 0 ]]; then
      installer_name=$binstaller
      installer_options=''
      if [[ $installer_name == 'apt' ]]; then
        installer_options='-y'
      fi
      $binstaller install meld $installer_options || (test $? -ne 0 && $nsudo $binstaller install meld $installer_options) &
      check $! "$binstaller install meld" "$binstaller install meld failed"
      if [[ $? -eq 0 ]]; then
        dependencies_failed_count=$((dependencies_failed_count-1))
        break
      fi
    else
      dependencies_failed_count=$((dependencies_failed_count-1))
      break
    fi
    break
  done
}

