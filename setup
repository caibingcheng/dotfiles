#!/bin/bash

target=$1
nsudo=$2
if [[ "$nsudo" == "sudo" ]]; then
    sudo /bin/ls &>/dev/null
fi
candidates=(zsh bash)
dotfiles=https://github.com/caibingcheng/dotfiles.git
dependencies=()
# software.aliasname.installer
if [[ "$(uname)" == "Darwin" ]]; then
    dependencies=( \
        rcm.rcup.brew \
        autossh.autossh.brew \
        cargo.cargo.brew \
        exa.exa.cargo \
        bat.bat.cargo \
        fd.fd.cargo \
        ripgrep.rg.cargo \
    )
else
    dependencies=( \
        rcm.rcup.apt \
        git.git.apt \
        autossh.autossh.apt \
        cargo.cargo.apt \
        exa.exa.apt,cargo \
        bat.bat.apt,cargo \
        fd-find.fd,fdfind.apt,cargo \
        ripgrep.rg.apt,cargo \
    )
fi

shell=$(echo $SHELL | awk -F'/' '{print $NF}')
if [[ "$target" == "" ]]; then
    target=$shell
fi
function echo_ok() {
    echo -e "\033[32m[OK]\033[0m"
}

function echo_no() {
    echo -e "\033[31m[NO]\033[0m"
}

valid=no
echo -n "check $target ... "
for candidate in ${candidates[@]}; do
    if [[ "$target" == "$candidate" ]]; then
        valid=yes
    fi
done
if [[ "$valid" == "no" ]]; then
    echo_no
    echo "support targets: ${candidates}"
    exit 1
else
    echo_ok
fi

function installer() {
    installer_name=$1
    shift
    software_name=$@

    if [[ "$installer_name" == "brew" ]]; then
        brew install $software_name &>/dev/null
    elif [[ "$installer_name" == "apt" ]]; then
        ${nsudo} apt-get install -y $software_name &>/dev/null
    elif [[ "$installer_name" == "cargo" ]]; then
        cargo install $software_name &>/dev/null
    fi
}

function installer_if() {
    softwares=$(echo $1 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')
    commands=$(echo $2 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')
    installers=$(echo $3 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')

    # temp env
    if [[ "$(echo $PATH | grep $HOME/.cargo/bin)" == "" ]]; then
        export PATH=$PATH:$HOME/.cargo/bin
    fi

    echo -n "check $softwares ... "
    software_status="failed"
    for test_command in ${commands[@]}; do
        if [[ "$(command -v ${test_command})" != "" ]]; then
            echo_ok
            software_status="success"
            return 0
        fi
    done
    if [[ "$software_status" == "failed" ]]; then
        echo_no
    fi

    # install software
    for software_name in ${softwares[@]}; do
        for installer_name in ${installers[@]}; do
            if [[ "$(command -v ${installer_name})" != "" ]]; then
                echo -n "   install $software_name with $installer_name ... "
                installer $installer_name $software_name
                install_status="failed"
                for test_command in ${commands[@]}; do
                    if [[ "$(command -v ${test_command})" != "" ]]; then
                        echo_ok
                        install_status="success"
                        return 0
                    fi
                done
                if [[ "$install_status" == "failed" ]]; then
                    echo_no
                fi
            fi
        done
    done
}

function check_dotfiles() {
    echo -n "check dotfiles ... "
    if [[ ! -d $HOME/.dotfiles ]]; then
        echo_no
        echo -n "   clone dotfiles ... "
        git clone $dotfiles $HOME/.dotfiles &>/dev/null
        if [[ ! -d $HOME/.dotfiles ]]; then
            echo_no
            exit 1
        else
            echo_ok
        fi
    else
        echo_ok
    fi
}

function install_dependencies() {
    # installer update
    for dependency in ${dependencies[@]}; do
        params=$(echo $dependency | awk -F'.' '{print $1" "$2" "$3}')
        installer_if $params
    done
}

function install_rcm() {
    if [[ "$(command -v rcup)" != "" ]]; then
        return 0
    fi
    if [[ "$(uname)" == "Linux" ]]; then
        sudo wget -q https://apt.thoughtbot.com/thoughtbot.gpg.key -O /etc/apt/trusted.gpg.d/thoughtbot.gpg
        echo "deb https://apt.thoughtbot.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/thoughtbot.list
        sudo apt-get update
    fi
}

function setup_rc() {
    if [[ "$(command -v rcup)" == "" ]]; then
        echo "rcup not found"
        exit 1
    fi

    rcup -t rcm -x LICENSE -x README.md -x setup
    if [[ "$@" != "" ]]; then
        rcup -t $@
    fi
}

function echo_notice() {
    if [[ "$target" == "bash" ]]; then
        echo "run 'source $HOME/.bashrc' to enable config"
    fi
    if [[ "$target" == "zsh" ]]; then
        echo "run 'source $HOME/.zshrc' to enable config"
    fi
}

function main() {
    install_rcm
    install_dependencies
    # keep dependencies first
    check_dotfiles

    setup_rc $target
    echo_notice
}

main
