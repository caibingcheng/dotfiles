#!/bin/bash

result=0
shell=$1
binstaller=apt
candidates_shell=(zsh bash)
candidates_installer=(apt brew)
dotfiles=https://github.com/caibingcheng/dotfiles.git
dotfiles_dir=$HOME/.dotfiles
dependencies_path=$dotfiles_dir/dependencies
dependencies_build_path=$dotfiles_dir/build.py
dependencies_build_source_path=$dotfiles_dir/dependencies.txt
dependencies_url=https://raw.githubusercontent.com/caibingcheng/dotfiles/main/dependencies
github_hosts_url=https://cdn.jsdelivr.net/gh/caibingcheng/hosts@main/dns/github
valid_shell=(zsh bash sh ksh csh tcsh fish dash yash) # I have not tested all of them

# need sudo
nsudo=""
# need required, it is must
nrequired=required
# need basic, it a default
nbasic=basic
# need optional, it optional
noptional=""
# need update, update dotfiles
nupdate=""

is_valid=0
for valid in ${valid_shell[@]}; do
    if [[ "$shell" == "$valid" ]]; then
        shift
        is_valid=1
        break
    fi
done
if [[ "$shell" == "" || "$is_valid" == "0" ]]; then
    shell=$(echo $SHELL | awk -F'/' '{print $NF}')
fi
while [[ "$1" != "" ]]; do
    case $1 in
    sudo)
        nsudo=sudo
        ;;
    update)
        nupdate=update
        ;;
    --basic)
        nbasic=basic
        ;;
    --no-basic)
        nbasic=""
        ;;
    --required)
        nrequired=required
        ;;
    --optional)
        noptional=optional
        ;;
    *)
        echo "unknown argument: $1"
        exit 1
        ;;
    esac
    shift
done

function print_help() {
    echo "Usage: $0 [shell] [options]"
    echo "    shell: shell name, default is \$SHELL"
    echo "    options:"
    echo "        sudo: use sudo to install software"
    echo "        --basic: install basic dependencies (default)"
    echo "        --no-basic: not install basic dependencies"
    echo "        --required: install required dependencies (default)"
    echo "        --optional: install optional dependencies"
    exit 0
}

function section() {
    echo -e "\n\033[1;33m==== $1 ====\033[0m"
}

function sub_setction() {
    echo -e "\033[33m>>>> $1 <<<<\033[0m"
}

function do_check() {
    $($@ &>/dev/null)
    return $?
}

function check() {
    foo_pid=$1
    message=$2
    failed_message=$3
    echo -n "    $message ... "

    spin() {
        spins='-\|/'
        while :; do
            i=$(((i + 1) % 4))
            echo -ne "\r[${spins:$i:1}]"
            sleep .1
        done
    }
    spin &
    spin_pid=$!
    wait $foo_pid &>/dev/null
    result=$?
    kill $spin_pid &>/dev/null
    wait $spin_pid &>/dev/null
    if [[ "$result" == "0" ]]; then
        echo -e "\r\033[1;32m[âˆš]\033[0m"
        return 0
    else
        echo -e "\r\033[1;31m[X]\033[0m"
        if [[ "$failed_message" != "" ]]; then
            echo "    $failed_message"
        fi
        return 1
    fi
}

function exist_on_fail_no_help() {
    if [[ "$?" != "0" ]]; then
        if [[ "$1" != "" ]]; then
            echo "$1"
        fi
        exit 1
    fi
}

function exit_on_fail() {
    if [[ "$?" != "0" ]]; then
        print_help
        exit 1
    fi
}

function exit_on_success() {
    if [[ "$?" == "0" ]]; then
        exit 0
    fi
}

function on_fail() {
    if [[ "$?" != "0" ]]; then
        $@
    fi
}

function on_success() {
    if [[ "$?" == "0" ]]; then
        $@
    fi
}

function read_on_fail() {
    if [[ "$?" != "0" ]]; then
        read -p "    $1"
    fi
}

function check_command() {
    commands=$@
    for command in $commands; do
        if [[ "$(command -v $command)" != "" ]]; then
            return 0
        fi
    done
    return 1
}

function check_target() {
    for candidate in ${candidates_shell[@]}; do
        if [[ "$shell" == "$candidate" ]]; then
            return 0
        fi
    done
    return 1
}

function check_installer() {
    local installer=""
    for installer in ${candidates_installer[@]}; do
        if [[ "$(command -v $installer)" != "" ]]; then
            binstaller=$installer
            return 0
        fi
    done
    return 1
}

function check_dotfiles() {
    do_check [ -d $dotfiles_dir ] &
    check $! "check dotfiles" "dotfiles not found"
    if [[ "$?" == "0" ]]; then
        if [[ "$nupdate" != "" ]]; then
            do_check git -C $dotfiles_dir pull &
            check $! "update dotfiles" "update dotfiles failed"
        fi
        return 0
    fi

    do_check git clone --depth=1 $dotfiles $dotfiles_dir &>/dev/null && do_check [ -d $dotfiles_dir ] &
    check $! "download dotfiles" "download dotfiles failed"
    exit_on_fail
}

function check_link_match() {
    local link=$1
    local target=$2
    if [[ ! -f $link ]]; then
        return 1
    fi

    local link_target=$(readlink $link)
    if [[ "$link_target" != "$target" ]]; then
        return 2
    fi

    return 0
}

function do_link() {
    local link=$1
    local target=$2
    check_link_match $link $target &
    check $! "$link --> $target"

    # link no exist
    if [[ "$?" == "1" ]]; then
        do_check ln -s $target $link &
        check $! "link $link --> $target"
        read_on_fail "replace $link with $target [y/N]?"
    fi
    read_on_fail "replace $link with $target [y/N]?"
    if [ "$REPLY" == "y" ]; then
        do_check ln -sf $target $link &
        check $! "replace $link with $target"
    fi
}

function do_install() {
    installer_name=$1
    shift
    software_name=$@
    install_param=""
    if [[ "$installer_name" == "apt" ]]; then
        install_param="-y"
    fi
    $nsudo $installer_name $software_name $install_param &>/dev/null
    return $?
}

function setup_rc() {
    dotfiles_subdirs=$(ls $dotfiles_dir)
    for shell_env_dir in ${candidates_shell[@]}; do
        dotfiles_subdirs=$(echo $dotfiles_subdirs | sed "s/$shell_env_dir//g")
    done
    for dotfiles_subdir in ${dotfiles_subdirs[@]}; do
        if [[ -d $dotfiles_dir/$dotfiles_subdir ]]; then
            source $dotfiles_dir/$dotfiles_subdir/setup
        fi
    done

    shell_rc=$dotfiles_dir/$1/setup
    if [[ ! -f $shell_rc ]]; then
        echo "shell rc file not found: $shell_rc"
        exit 1
    fi
    source $shell_rc
}

function echo_notice() {
    if [[ "$shell" == "bash" ]]; then
        echo "run 'source $HOME/.bashrc' to enable config"
    fi
    if [[ "$shell" == "zsh" ]]; then
        echo "run 'source $HOME/.zshrc' to enable config"
    fi
    echo "and then reboot your machine"
}

function build_dependences() {
    if [[ ! -f $dependencies_build_path ]]; then
        return 0
    fi
    if [[ ! -f $dependencies_build_source_path ]]; then
        return 0
    fi

    # only support python3
    check_command python3 &&
        if [[ "$?" == "0" ]]; then
            do_check python3 $dependencies_build_path $dependencies_build_source_path $dependencies_path &
            check $! "build dependencies" "build dependencies failed"
            exit_on_fail
            return 0
        fi
}

function update_host() {
    test -f /tmp/hosts || do_check curl -s $github_hosts_url -o /tmp/hosts &
    check $! "update github hosts" "update github hosts failed"
    exist_on_fail_no_help

    # workaroud
    $nsudo cp /etc/hosts /tmp/hosts_tmp &>/dev/null
    $nsudo sed -i '/github/d' /tmp/hosts_tmp &>/dev/null
    $nsudo bash -c "cat /tmp/hosts >> /tmp/hosts_tmp" &>/dev/null

    do_check $nsudo mv /tmp/hosts_tmp /etc/hosts &
    check $! "update hosts" "update hosts failed"
    exist_on_fail_no_help "super admin permission required"
}

function prepare() {
    if [[ "$nsudo" == "sudo" ]]; then
        sudo /bin/ls &>/dev/null
    fi

    update_host

    check_target &
    check $! "check $shell" "unknown shell: $shell"
    exit_on_fail

    check_installer &
    check $! "check installer" "unknown installer"
    exit_on_fail

    # if apt not update, update it
    if [[ "$binstaller" == "apt" ]]; then
        do_install apt update &
        check $! "update apt" "update apt failed"
    fi

    # add cargo to PATH first
    if [[ "$(echo $PATH | grep $HOME/.cargo/bin)" == "" ]]; then
        export PATH=$PATH:$HOME/.cargo/bin
    fi

    build_dependences

    if [[ -f $dependencies_path ]]; then
        source $dependencies_path "$nsudo" "$binstaller"
    else
        do_check curl -s $dependencies_url -o /tmp/dependencies &
        check $! "download dependencies" "download dependencies failed"
        exit_on_fail
        source /tmp/dependencies "$nsudo" "$binstaller"
    fi
}

function main() {
    echo "shell: $shell"
    echo "binstaller: $binstaller"
    echo "nsudo: \"$nsudo\""
    section "prepare"
    prepare

    if [[ "$nrequired" != "" ]]; then
        section "install required dependencies"
        dependencies_required_install
        check_dotfiles
    fi

    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    eval "$(brew --prefix)/bin/brew shellenv"

    if [[ "$nbasic" != "" ]]; then
        section "install basic dependencies"
        dependencies_basic_install
    fi
    if [[ "$noptional" != "" ]]; then
        section "install optional dependencies"
        dependencies_optional_install
    fi

    section "setup rc"
    setup_rc $shell
    section "done"

    if [[ $dependencies_failed_count -gt 0 ]]; then
        echo "$dependencies_failed_count dependences failed"
    fi
    echo_notice
}

main
