#!/bin/bash

function echo_check() {
    echo -n "check $1 ... "
}

function echo_install() {
    echo -n "   install $1 ... "
}

function echo_clone() {
    echo -n "   clone $1 ... "
}

function echo_clean() {
    # clear current line
    echo -ne "\033[2K\r"
    # move cursor to the beginning of line
    echo -ne "\033[0G"
}

function echo_ok() {
    echo -e "\033[32m[OK]\033[0m"
}

function echo_no() {
    echo -e "\033[31m[NO]\033[0m"
}

# arguments
# ./setup bash
# ./setup bash sudo
# ./setup bash sudo --optional
# ./setup bash sudo --no-basic
# get arguments
target=$1
if [[ "$target" == "" ]]; then
    target=$(echo $SHELL | awk -F'/' '{print $NF}')
fi
shift

nsudo=""
nrequired=required
nbasic=basic
noptional=""
while [[ "$1" != "" ]]; do
    case $1 in
        sudo)
            nsudo=sudo
            ;;
        --basic)
            nbasic=basic
            ;;
        --no-basic)
            nbasic=""
            ;;
        --required)
            nrequired=required
            ;;
        --optional)
            noptional=optional
            ;;
        *)
            echo "unknown argument: $1"
            exit 1
            ;;
    esac
    shift
done

if [[ "$nsudo" == "sudo" ]]; then
    sudo /bin/ls &>/dev/null
fi

candidates=(zsh bash)
dotfiles=https://github.com/caibingcheng/dotfiles.git
dotfiles_dir=$HOME/.dotfiles
dependencies_path=$dotfiles_dir/dependencies.txt
dependencies_url=https://raw.githubusercontent.com/caibingcheng/dotfiles/master/dependencies.txt
dependencies_required=()
dependencies_basic=()
dependencies_optional=()

valid=no
echo_check $target
for candidate in ${candidates[@]}; do
    if [[ "$target" == "$candidate" ]]; then
        valid=yes
    fi
done
if [[ "$valid" == "no" ]]; then
    echo_no
    echo "support targets: ${candidates}"
    exit 1
else
    echo_ok
fi

# basic installers
echo_check installers
binstaller=""
if [[ "$(command -v apt)" != "" ]]; then
    binstaller=apt
elif [[ "$(command -v brew)" != "" ]]; then
    binstaller=brew
fi
if [[ "$binstaller" == "" ]]; then
    echo_no
    exit 1
else
    # roll back to the line
    echo_clean
    echo_check $binstaller
    echo_ok
fi

function installer() {
    installer_name=$1
    shift
    software_name=$@
    $installer_name install $software_name &>/dev/null
    if [[ "$?" != "0" ]]; then
        $nsudo $installer_name install $software_name &>/dev/null
    fi
}

function installer_if() {
    softwares=$(echo $1 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')
    commands=$(echo $2 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')
    installers=$(echo $3 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')

    # temp env
    if [[ "$(echo $PATH | grep $HOME/.cargo/bin)" == "" ]]; then
        export PATH=$PATH:$HOME/.cargo/bin
    fi

    echo_check $softwares
    software_status="failed"
    for test_command in ${commands[@]}; do
        if [[ "$(command -v ${test_command})" != "" ]]; then
            echo_ok
            software_status="success"
            return 0
        fi
    done
    if [[ "$software_status" == "failed" ]]; then
        echo_no
    fi

    # install software
    for software_name in ${softwares[@]}; do
        for installer_name in ${installers[@]}; do
            if [[ "$(command -v ${installer_name})" != "" ]]; then
                echo_install "$software_name with $installer_name"
                installer $installer_name $software_name
                install_status="failed"
                for test_command in ${commands[@]}; do
                    if [[ "$(command -v ${test_command})" != "" ]]; then
                        echo_ok
                        install_status="success"
                        return 0
                    fi
                done
                if [[ "$install_status" == "failed" ]]; then
                    echo_no
                fi
            fi
        done
    done
}

function check_dotfiles() {
    echo_check dotfiles
    if [[ ! -d $dotfiles_dir ]]; then
        echo_no
        echo_clone dotfiles
        git clone $dotfiles $dotfiles_dir &>/dev/null
        if [[ ! -d $dotfiles_dir ]]; then
            echo_no
            exit 1
        else
            echo_ok
        fi
    else
        echo_ok
    fi
}

function extract_dependencies() {
    dependencies=""
    if [[ -f $dependencies_path ]]; then
        dependencies=$(cat $dependencies_path)
    else
        dependencies=$(curl -s $dependencies_url)
    fi
    dependencies=$(echo $dependencies | sed "s/\${binstaller}/$binstaller/g")

    current_dependencies_type=""
    for dependency in ${dependencies[@]}; do
        if [[ "$dependency" == "" ]]; then
            continue
        fi

        if [[ "$dependency" == "==required==" ]]; then
            current_dependencies_type="required"
            continue
        elif [[ "$dependency" == "==optional==" ]]; then
            current_dependencies_type="optional"
            continue
        elif [[ "$dependency" == "==basic==" ]]; then
            current_dependencies_type="basic"
            continue
        fi

        if [[ "$current_dependencies_type" == "required" ]]; then
            dependencies_required+=($dependency)
        elif [[ "$current_dependencies_type" == "optional" ]]; then
            dependencies_optional+=($dependency)
        elif [[ "$current_dependencies_type" == "basic" ]]; then
            dependencies_basic+=($dependency)
        fi
    done
}

function install_dependencies() {
    # installer update
    dependencies=$@
    for dependency in ${dependencies[@]}; do
        params=$(echo $dependency | awk -F'.' '{print $1" "$2" "$3}')
        installer_if $params
    done
}

function preinstall() {
    if [[ "$(command -v rcup)" != "" ]]; then
        return 0
    fi
    if [[ "$(uname)" == "Linux" ]]; then
        sudo wget -q https://apt.thoughtbot.com/thoughtbot.gpg.key -O /etc/apt/trusted.gpg.d/thoughtbot.gpg
        echo "deb https://apt.thoughtbot.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/thoughtbot.list
        sudo apt-get update
    fi
}

function setup_rc() {
    if [[ "$(command -v rcup)" == "" ]]; then
        echo "rcup not found"
        exit 1
    fi

    rcup -t rcm -x LICENSE -x README.md -x setup -x dependenc*
    if [[ "$@" != "" ]]; then
        rcup -t $@
    fi
}

function echo_notice() {
    if [[ "$target" == "bash" ]]; then
        echo "run 'source $HOME/.bashrc' to enable config"
    fi
    if [[ "$target" == "zsh" ]]; then
        echo "run 'source $HOME/.zshrc' to enable config"
    fi
}

function main() {
    extract_dependencies

    preinstall
    install_dependencies ${dependencies_required[@]}
    check_dotfiles
    setup_rc $target

    if [[ "$nbasic" != "" ]]; then
        install_dependencies ${dependencies_basic[@]}
    fi
    if [[ "$noptional" != "" ]]; then
        install_dependencies ${dependencies_optional[@]}
    fi
    echo_notice
}

main
