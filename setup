#!/bin/bash

result=0
shell=$1
binstaller=apt
candidates_shell=(zsh bash)
candidates_installer=(apt brew)
dotfiles=https://github.com/caibingcheng/dotfiles.git
dotfiles_dir=$HOME/.dotfiles
dependencies_path=$dotfiles_dir/dependencies.txt
dependencies_url=https://raw.githubusercontent.com/caibingcheng/dotfiles/master/dependencies.txt
dependencies_required=()
dependencies_basic=()
dependencies_optional=()

# need sudo
nsudo=""
# need required, it is must
nrequired=required
# need basic, it a default
nbasic=basic
# need optional, it optional
noptional=""
if [[ "$shell" == "" ]]; then
    shell=$(echo $SHELL | awk -F'/' '{print $NF}')
fi
shift
while [[ "$1" != "" ]]; do
    case $1 in
        sudo)
            nsudo=sudo
            ;;
        --basic)
            nbasic=basic
            ;;
        --no-basic)
            nbasic=""
            ;;
        --required)
            nrequired=required
            ;;
        --optional)
            noptional=optional
            ;;
        *)
            echo "unknown argument: $1"
            exit 1
            ;;
    esac
    shift
done

function section() {
    echo -e "\n\033[1;33m$1\033[0m"
}

function do_check() {
    $($@ &>/dev/null)
    return $?
}

function check() {
    foo_pid=$1
    message=$2
    failed_message=$3
    echo -n "    $message ... "

    spin () {
        spins='-\|/'
        while :; do
            i=$(( (i+1) % 4 ))
            echo -ne "\r[${spins:$i:1}]"
            sleep .1
        done
    }
    spin & spin_pid=$!
    wait $foo_pid &>/dev/null
    result=$?
    kill $spin_pid &>/dev/null
    wait $spin_pid &>/dev/null
    if [[ "$result" == "0" ]]; then
        echo -e "\r\033[1;32m[âˆš]\033[0m"
        return 0
    else
        echo -e "\r\033[1;31m[X]\033[0m"
        if [[ "$failed_message" != "" ]]; then
            echo "    $failed_message"
        fi
        return 1
    fi
}

function exit_on_fail() {
    if [[ "$?" != "0" ]]; then
        exit 1
    fi
}

function exit_on_success() {
    if [[ "$?" == "0" ]]; then
        exit 0
    fi
}

function read_on_fail() {
    if [[ "$?" != "0" ]]; then
        read -p "    $1"
    fi
}

function check_command() {
    commands=$@
    for command in $commands; do
        if [[ "$(command -v $command)" != "" ]]; then
            return 0
        fi
    done
    return 1
}

function check_target() {
    for candidate in ${candidates_shell[@]}; do
        if [[ "$shell" == "$candidate" ]]; then
            return 0
        fi
    done
    return 1
}

function check_installer() {
    local installer=""
    for installer in ${candidates_installer[@]}; do
        if [[ "$(command -v $installer)" != "" ]]; then
            binstaller=$installer
            return 0
        fi
    done
    return 1
}

function check_dotfiles() {
    do_check [ -d $dotfiles_dir ] &
    check $! "check dotfiles" "dotfiles not found"
    if [[ "$?" == "0" ]]; then
        return 0
    fi

    do_check git clone --depth 1 $dotfiles $dotfiles_dir &>/dev/null && \
        do_check [ -d $dotfiles_dir ] &
    check $! "download dotfiles" "download dotfiles failed"
    exit_on_fail
}

function check_link_match() {
    local link=$1
    local target=$2
    if [[ ! -f $link ]]; then
        return 1
    fi

    local link_target=$(readlink $link)
    if [[ "$link_target" != "$target" ]]; then
        return 2
    fi

    return 0
}

function do_link() {
    local link=$1
    local target=$2
    check_link_match $link $target &
    check $! "$link --> $target"

    # link no exist
    if [[ "$?" == "1" ]]; then
        do_check ln -s $target $link &
        check $! "link $link --> $target"
        read_on_fail "replace $link with $target [y/N]?"
    fi
    read_on_fail "replace $link with $target [y/N]?"
    if [ "$REPLY" == "y" ]; then
        do_check ln -sf $target $link &
        check $! "replace $link with $target"
    fi
}

function do_install() {
    installer_name=$1
    shift
    software_name=$@
    $installer_name install $software_name &>/dev/null
    if [[ "$?" != "0" ]]; then
        $nsudo $installer_name install $software_name &>/dev/null
    fi
    return $?
}

function install_with() {
    softwares=$(echo $1 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')
    commands=$(echo $2 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')
    installers=$(echo $3 | awk -F',' '{for(i=1;i<=NF;i++){print $i}}')

    # temp env
    if [[ "$(echo $PATH | grep $HOME/.cargo/bin)" == "" ]]; then
        export PATH=$PATH:$HOME/.cargo/bin
    fi

    check_command $commands &
    check $! "check $softwares" "$softwares not found"
    if [[ "$?" == "0" ]]; then
        return 0
    fi

    # install software
    for software_name in ${softwares[@]}; do
        for installer_name in ${installers[@]}; do
            if [[ "$(command -v ${installer_name})" != "" ]]; then
                do_install $installer_name $software_name &
                check $! "install $software_name with $installer_name" "install $software_name with $installer_name failed"
            fi
        done
    done
}

function extract_dependencies() {
    dependencies=""
    if [[ -f $dependencies_path ]]; then
        dependencies=$(cat $dependencies_path)
    else
        dependencies=$(curl -s $dependencies_url)
    fi
    dependencies=$(echo $dependencies | sed "s/\${binstaller}/$binstaller/g")

    current_dependencies_type=""
    for dependency in ${dependencies[@]}; do
        if [[ "$dependency" == "" ]]; then
            continue
        fi

        if [[ "$dependency" == "==required==" ]]; then
            current_dependencies_type="required"
            continue
        elif [[ "$dependency" == "==optional==" ]]; then
            current_dependencies_type="optional"
            continue
        elif [[ "$dependency" == "==basic==" ]]; then
            current_dependencies_type="basic"
            continue
        fi

        if [[ "$current_dependencies_type" == "required" ]]; then
            dependencies_required+=($dependency)
        elif [[ "$current_dependencies_type" == "optional" ]]; then
            dependencies_optional+=($dependency)
        elif [[ "$current_dependencies_type" == "basic" ]]; then
            dependencies_basic+=($dependency)
        fi
    done

    # remove duplicate
    dependencies_required=($(echo ${dependencies_required[@]} | tr ' ' '\n' | sort -u | tr '\n' ' '))
    dependencies_optional=($(echo ${dependencies_optional[@]} | tr ' ' '\n' | sort -u | tr '\n' ' '))
    dependencies_basic=($(echo ${dependencies_basic[@]} | tr ' ' '\n' | sort -u | tr '\n' ' '))
}

function install_dependencies() {
    local dependencies=$@
    for dependency in ${dependencies[@]}; do
        params=$(echo $dependency | awk -F'.' '{print $1" "$2" "$3}')
        install_with $params
    done
}

function setup_rc() {
    shell_rc=$dotfiles_dir/$1/setup
    if [[ ! -f $shell_rc ]]; then
        echo "shell rc file not found: $shell_rc"
        exit 1
    fi
    source $shell_rc
    source $dotfiles_dir/bin/setup
    source $dotfiles_dir/common/setup
    source $dotfiles_dir/os/setup
}

function echo_notice() {
    if [[ "$shell" == "bash" ]]; then
        echo "run 'source $HOME/.bashrc' to enable config"
    fi
    if [[ "$shell" == "zsh" ]]; then
        echo "run 'source $HOME/.zshrc' to enable config"
    fi
}

function prepare() {
    if [[ "$nsudo" == "sudo" ]]; then
        sudo /bin/ls &>/dev/null
    fi

    check_target &
    check $! "check $shell" "unknown shell: $shell"
    exit_on_fail

    check_installer &
    check $! "check installer" "unknown installer"
    exit_on_fail

    extract_dependencies
}

function main() {
    section "==== prepare ===="
    prepare

    if [[ "$nrequired" != "" ]]; then
        section "==== install required dependencies ===="
        install_dependencies ${dependencies_required[@]}
        check_dotfiles
    fi

    section "==== setup rc ===="
    setup_rc $shell

    if [[ "$nbasic" != "" ]]; then
        section "==== install basic dependencies ===="
        install_dependencies ${dependencies_basic[@]}
    fi
    if [[ "$noptional" != "" ]]; then
        section "==== install optional dependencies ===="
        install_dependencies ${dependencies_optional[@]}
    fi

    section "==== done ===="
    echo_notice
}

main
