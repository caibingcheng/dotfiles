# shellcheck shell=sh
# chezmoi:template:left-delimiter="# {{" right-delimiter=}}

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ]; then
    export PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "${HOME}/.local/share/flutter/bin" ]; then
    export PATH="${HOME}/.local/share/flutter/bin:${PATH}"
fi

if [ -d "${HOME}/.cargo/bin" ]; then
    export PATH="${HOME}/.cargo/bin:${PATH}"
fi

if [ -d "${HOME}/.local/go/bin" ]; then
    export PATH="${HOME}/.local/go/bin:${PATH}"
fi

if [ -d "${HOME}/go/bin" ]; then
    export PATH="${HOME}/go/bin:${PATH}"
fi

if [ -d "${GOPATH}/bin" ]; then
    export PATH="${GOPATH}/bin:${PATH}"
fi

export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
export NIXPKGS_ALLOW_UNFREE=1

### Tools/Plugins Env
export FZF_COMPLETION_TRIGGER="??"
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"FZF_DEFAULT_OPTS
# Preview file content using bat (https://github.com/sharkdp/bat)
export FZF_CTRL_T_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"
# CTRL-Y to copy the command into clipboard using pbcopy
export FZF_CTRL_R_OPTS="
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"
# Print tree structure in the preview window
export FZF_ALT_C_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'tree -C {}'"
### fzf end

### bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
### bat end

### pipx
test "$(command -v pipx)" != "" && eval "$(register-python-argcomplete3 pipx)"
test -f "${HOME}/.cargo/env" && source "${HOME}/.cargo/env"
### pipx end

### brew
export HOMEBREW_NO_AUTO_UPDATE=true
test -x /home/linuxbrew/.linuxbrew/bin/brew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
### brew end

### End Tools/Plugins Env

### Comm functions
function git_branch() {
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ "${branch}" != "" ]; then
        if [ "${branch}" == "(no branch)" ]; then
            branch="($(git rev-parse --short HEAD)...)"
        fi
        commit=$(git rev-parse --short HEAD)
        staged_count=$(git diff --staged --name-only | wc -l)
        unstaged_count=$(git diff --name-only | wc -l)
        untracked_count=$(git ls-files --others --exclude-standard | wc -l)
        stage_info="s:${staged_count} us:${unstaged_count} ut:${untracked_count}"
        echo -e "\e[2m${1}${branch}\e[0m \e[2m(${commit}) (${stage_info})${2}\e[0m"
    fi
}

function only_uptime() {
    # use HH:SS and HH can be more than 24
    seconds=$(cut -d. -f1 /proc/uptime)
    hours=$(($seconds / 3600))
    minutes=$(($seconds % 3600 / 60))
    if [ $hours -gt 24 ]; then
        days=$(($hours / 24))
        hours=$(($hours % 24))
        # > 2d, use ligter color
        # > 5d, use even lighter color
        # > 10d, use even lighter color
        if [ $days -gt 10 ]; then
            echo -e "\e[93;1m[${days}d${hours}h]\e[0m"
        elif [ $days -gt 5 ]; then
            echo -e "\e[93;2m[${days}d${hours}h]\e[0m"
        elif [ $days -gt 2 ]; then
            echo -e "\e[32;2m[${days}d${hours}h]\e[0m"
        else
          echo -e "\e[2m[${days}d${hours}h]\e[0m"
        fi
    else
        echo -e "\e[2m[${hours}:${minutes}]\e[0m"
    fi
}

# integration zoxide with fzf
function zz() {
  local dir=$(
    zoxide query --list --score |
    fzf --height 40% --layout reverse --info inline \
        --nth 2.. --tac --no-sort --query "$*" \
        --bind 'enter:become:echo {2..}'
  ) && cd "$dir"
}

# integration git with fzf
# fgb - checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
fgb() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git --no-pager log -150 --pretty=format:%s '..{2}'") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# fcoc - checkout git commit
fgc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# fshow - git commit browser
fgss() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# fcs - get git commit sha
# example usage: git rebase -i `fcs`
fgs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}
# integration git with fzf end

export -f git_branch
export -f only_uptime
. "$HOME/.cargo/env"

