# shellcheck shell=sh
# chezmoi:template:left-delimiter="# {{" right-delimiter=}}

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ]; then
    export PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "${HOME}/.local/share/flutter/bin" ]; then
    export PATH="${HOME}/.local/share/flutter/bin:${PATH}"
fi

if [ -d "${HOME}/.cargo/bin" ]; then
    export PATH="${HOME}/.cargo/bin:${PATH}"
fi

if [ -d "${HOME}/.local/go/bin" ]; then
    export PATH="${HOME}/.local/go/bin:${PATH}"
fi

if [ -d "${HOME}/go/bin" ]; then
    export PATH="${HOME}/go/bin:${PATH}"
fi

if [ -d "${GOPATH}/bin" ]; then
    export PATH="${GOPATH}/bin:${PATH}"
fi

export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
export NIXPKGS_ALLOW_UNFREE=1

### Tools/Plugins Env
export FZF_COMPLETION_TRIGGER="??"
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS=$FZF_DEFAULT_OPTS
### fzf end

### bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
### bat end

### pipx
test "$(command -v pipx)" != "" && eval "$(register-python-argcomplete3 pipx)"
test -f "${HOME}/.cargo/env" && source "${HOME}/.cargo/env"
### pipx end

### brew
export HOMEBREW_NO_AUTO_UPDATE=true
test -x /home/linuxbrew/.linuxbrew/bin/brew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
### brew end

### End Tools/Plugins Env

### Comm functions
function git_branch() {
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ "${branch}" != "" ]; then
        if [ "${branch}" == "(no branch)" ]; then
            branch="($(git rev-parse --short HEAD)...)"
        fi
        commit=$(git rev-parse --short HEAD)
        staged_count=$(git diff --staged --name-only | wc -l)
        unstaged_count=$(git diff --name-only | wc -l)
        untracked_count=$(git ls-files --others --exclude-standard | wc -l)
        stage_info="s:${staged_count} us:${unstaged_count} ut:${untracked_count}"
        echo "${1}${branch} (${commit}) (${stage_info})${2}"
    fi
}

function only_uptime() {
    # use HH:SS and HH can be more than 24
    seconds=$(cut -d. -f1 /proc/uptime)
    hours=$(($seconds / 3600))
    minutes=$(($seconds % 3600 / 60))
    if [ $hours -gt 24 ]; then
        days=$(($hours / 24))
        hours=$(($hours % 24))
        echo "${days}d${hours}h"
    else
        echo "${hours}:${minutes}"
    fi
}

export -f git_branch
export -f only_uptime
. "$HOME/.cargo/env"
